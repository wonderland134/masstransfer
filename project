
#Numerical method for solving problem
#Boundary condition : P(x=0) = Ps, P(x = L) = 0, P(t = 0) = 0 

import numpy as np
import sympy as sp
import matplotlib.pyplot as plt

def find_in(array, target):
	for i in range(len(array)):
		if (target-array[i])<=0:
			return i


D = 2.6*10**-6 		#cm^2/s

L = 4 					#cm
x_array = np.hstack([np.arange(0,0.6,0.1), np.arange(0.6,1.4,0.001), np.arange(1.4,L+0.2,0.2)])

t_end = 240			#s
nt = 100000
t_array = np.linspace(0, t_end, nt)
dt = t_array[1] - t_array[0]

C_init = 1
C_lim = 0

C_array = np.zeros_like(x_array)+(C_init+C_lim)/2		#mol/ml
x_interface = find_in(x_array, 1)

C_array[0:x_interface] = C_init
C_array[x_interface:-1] = C_lim

C_storage = np.array([])

t_1 = 4 * 60
#t_2 = 60 * 60

ti_1 = find_in(t_array, t_1)
#ti_2 = find_in(t_array, t_2)

xi_1 = find_in(x_array, 1)
xi_2 = find_in(x_array, 1.3)


#C_array[t][x], C_array[i][j]

#C[i+1][j] = dt/dx^2 * D * (C[i][j+1]-2*C[i][j]+C[i][j-1])+C[i][j] 
plt.close()
progress = int(0)
print(str(progress) + '% done')
i = 0
for i in range(len(t_array)):
	C_bef = C_array	
	C_bef[0] = C_init
	C_bef[len(C_bef)-1] = C_lim
	progress_temp = int(i/len(t_array)*100)
	if progress_temp != progress:
		progress = progress_temp
		print('{}'.format(progress) + '% done')
		
	while True:
		C_next = C_bef

		for j in range(1, len(x_array)-1):
			dx_av = (x_array[j+1]-x_array[j-1])/2
			C_next[j] = dt/dx_av * D * ((C_bef[j+1]-C_bef[j])/(x_array[j+1]-x_array[j])-(C_bef[j]-C_bef[j-1])/(x_array[j]-x_array[j-1]))+C_bef[j]
		
		det = (C_next - C_bef)/(C_bef+(C_init+C_lim)/2)
		
		if abs(det.max()) < 0.00001:
			C_array = C_next
			break
		else:
			C_bef = C_next

	if i==ti_1:
		C_storage = C_array
		plt.plot((x_array[xi_1:xi_2]-x_array[xi_1])*10000, C_array[xi_1:xi_2], label = 't = {} min'.format(t_1/60))
	#elif i==ti_2:
		#C_storage = np.vstack([C_storage, C_array])
		#plt.plot((x_array[xi_1:xi_2]-x_array[xi_1])*10000, C_array[xi_1:xi_2], label = 't = {} min'.format(t_2/60))

plt.xlabel('Distance in um')
plt.ylabel('Intensity')
plt.title('test')
plt.legend()
plt.grid()
plt.show()



